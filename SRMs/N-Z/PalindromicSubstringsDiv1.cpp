#include <string>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <cmath>
#include <utility>
#include <climits>
#include <limits>
#include <cstring>
#include <numeric>
using namespace std;
typedef long long LL;
typedef pair<int,int> PII;
// BEGIN CUT HERE
const int tt = -1;
// 
// END CUT HERE
double mem2[5001][5001];

class PalindromicSubstringsDiv1 {
 public:
  string s;
  double ispalindrome(int l, int rr) {
    double& r = mem2[l][rr];
    if (r != -1.0) return r;
    if (l == rr) return r = 1;
    if (s[l] == '?' || s[rr] == '?') {
      if (l+1 <= rr-1)
        return r = 1/26.0*ispalindrome(l+1,rr-1);
      return r = 1/26.0;
    }
    if (s[l] != s[rr]) return r = 0;
    if (l+1 <= rr-1) return r = ispalindrome(l+1,rr-1);
    return r = 1;
  }
  double expectedPalindromes(vector <string> S1, vector <string> S2) {
    this->s = accumulate(S1.begin(),S1.end(),string(""))+
              accumulate(S2.begin(),S2.end(),string(""));
    fill(&mem2[0][0],&mem2[5001][0],-1.0);
    double r = 0;
    for (int i=0;i<s.size();i++)
      for (int j=i;j<s.size();j++)
        r+= ispalindrome(i,j);
    return r;
  }
};

// BEGIN CUT HERE
#include <ctime>
#include <cmath>
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;

int main(int argc, char* argv[])
{
	string a = tt == -1 ? "0" : string(1,'0'+tt);
	char* b[2] = {argv[0],(char*)a.c_str()};
	if(tt!=-1){argc=2;argv=b;}
	if (argc == 1) 
	{
		cout << "Testing PalindromicSubstringsDiv1 (250.0 points)" << endl << endl;
		for (int i = 0; i < 20; i++)
		{
			ostringstream s; s << argv[0] << " " << i;
			int exitCode = system(s.str().c_str());
			if (exitCode)
				cout << "#" << i << ": Runtime Error" << endl;
		}
		int T = time(NULL)-1411755520;
		double PT = T/60.0, TT = 75.0;
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		cout << endl;
		cout << "Time  : " << T/60 << " minutes " << T%60 << " secs" << endl;
		cout << "Score : " << 250.0*(.3+(.7*TT*TT)/(10.0*PT*PT+TT*TT)) << " points" << endl;
	}
	else
	{
		int _tc; istringstream(argv[1]) >> _tc;
		PalindromicSubstringsDiv1 _obj;
		double _expected, _received;
		time_t _start = clock();
		switch (_tc)
		{
			case 0:
			{
				string S1[] = {"a","a",""};
				string S2[] = {"a"};
				_expected = 6.0;
				_received = _obj.expectedPalindromes(vector <string>(S1, S1+sizeof(S1)/sizeof(string)), vector <string>(S2, S2+sizeof(S2)/sizeof(string))); break;
			}
			case 1:
			{
				string S1[] = {"z??"};
				string S2[] = {};
				_expected = 3.115384615384615;
				_received = _obj.expectedPalindromes(vector <string>(S1, S1+sizeof(S1)/sizeof(string)), vector <string>(S2, S2+sizeof(S2)/sizeof(string))); break;
			}
			case 2:
			{
				string S1[] = {"ab","c"};
				string S2[] = {"??","a?"};
				_expected = 7.315088757396449;
				_received = _obj.expectedPalindromes(vector <string>(S1, S1+sizeof(S1)/sizeof(string)), vector <string>(S2, S2+sizeof(S2)/sizeof(string))); break;
			}
			case 3:
			{
				string S1[] = {};
				string S2[] = {"?"};
				_expected = 1.0;
				_received = _obj.expectedPalindromes(vector <string>(S1, S1+sizeof(S1)/sizeof(string)), vector <string>(S2, S2+sizeof(S2)/sizeof(string))); break;
			}
			case 4:
			{
				string S1[] = {"ab?def","?"};
				string S2[] = {"f??a"};
				_expected = 12.545971779699588;
				_received = _obj.expectedPalindromes(vector <string>(S1, S1+sizeof(S1)/sizeof(string)), vector <string>(S2, S2+sizeof(S2)/sizeof(string))); break;
			}
			case 5:
			{
				string S1[] = {"???????????????????????b??????????????????????????", "???????b??????????????b????????????b????????????a?", "??????b???????a???????????????????????????????????", "??????????b????????????????????b??????????????????", "??????a?????a?b???????????????????????????a??a????", "??????????????????b????a?????????b????????????????", "?????????????????????????b???????????b????????????", "?a????????????????????a??????a????????????????????", "??????????????a????????????????????????????????b??", "???????????????????????????????????????a?????b????", "???????????a????????????????????????????????????b?", "??????????bb??????????????????????????????????????", "???????????????????????????????????????????????a??", "??????b???????????????????????????????????????????", "??b??????????????????????a?????b??????????????????", "??????????????????????????????b???????????????????", "????????????????????b???????a???????????????????b?", "???????b???????????????????????????????????????b??", "????????b???????b?????????????????????????????????", "????????b????????????????????????????bb???????????", "????????????????a???????b????????????a????????????", "?????b???b?????????????????????ba?????????????????", "??????????????????????????????????????????????????", "????????????b??????????????????????????a?b???b?b??", "b???????????a?????????????a?????????????a?????????", "???????b??????????????????????????????????????????", "??a???b???a??????????b???????????????????????a???a", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "?????????????????????????????????????????????????a", "??a?????????????????????a???a??b??????????????????", "????????????????a????b???????????????????????????a", "????????????b?????????????????????????????????a???", "????????b??????a??????????????????????????????????", "???????????????b??????????????????????b???????????", "?b???a???????????????????????a????????????????????", "???????????????b???????aab??b?????????????????????", "???????a??????????????????????????????????????????", "????????a????????????????a??????????????a?????????", "??b?b?????????????????????????????????????a???????", "?????????????????a????????????????????????????????", "????a?????b?????????????????????????????????b?b???", "???????????????????a??????????????????????????????", "????????????????b?????????????????b??????b????????", "?????a????????????????????????????????????????????", "??????????????b?????b?????????????????????????????", "?????????????????????????????????????????????????b", "?????????????????????????a????????????????????????", "??????a???????????????????????????????????????????", "???????????????????????????????????????????????b??"};
				string S2[] = {"?????????a?????b????????????????b???b?????????????", "??????????????????????????????????a?????????????a?", "??a????????ba?????????b???????????????????????????", "?????????????????b???????????????a?????b?b????????", "???????????????????a??????????????????????????????", "?????????????????????????b????????????????????????", "?????????????b?b?????a????????????????????b???????", "????????????????b?????????????????????????a???????", "?????????????????????????????????a????????????????", "???????????a??????????????b?????????a?????????????", "???????????????????????????????????a???????a??????", "??????????????????????????????a???????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????a?????????b?????????????????????????????", "a?????????????????????????????????????????????????", "?????????????????????????????????????????a????????", "????????????????????????????????????b??????????a??", "?????????a??????????a????????????a????????????????", "??????????????????????????????????????????????????", "??????????????????a???????a?????????????????????b?", "????????????????????a?b???b????????????a??????????", "?aa?????????????????????????a?????????????????????", "?a??????????b?????????b?a?????????????????????????", "???????a????????????????b??????aa??????????????b??", "???????????????a?a????a????????????????????????a??", "b?????a???????????????????bab?????????????????????", "???a??????????????b????a??????????????????????a???", "??????????????????????????????????????????????????", "?????????????????????b????????????????????????????", "??????????a??????????????a????????????????????????", "?????????????????????????a????????????????????????", "????????????????ba????????????????????????????????", "???????????????????b??????????????????????????????", "??????b??b????????b?????????????????????a????????a", "????????????????b??????????????????a?????????????b", "?????????a????ab????????????????????????b????????b", "?a????????????????????????????????????b???b???a???", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "b??????????????????b??????????b??a????????????????", "????????????????????????????????????????b?????????", "????????????b???????a???????a??a?????????????????a", "???????????????????????????????????b??????????b???", "??????????????????????????????b???????????????????", "??????b???a???????????????????????????????????b???", "???a??????????????????????????????????a???????????", "????b??????????????????????????a????????????b????b", "??????????????????????????????????????????????????", "???????????????????b???????????b???????????a??????"};
				_expected = 5411.88812386778;
				_received = _obj.expectedPalindromes(vector <string>(S1, S1+sizeof(S1)/sizeof(string)), vector <string>(S2, S2+sizeof(S2)/sizeof(string))); break;
			}
			case 6:
			{
				string S1[] = {"??????????k?a?????f??????q???????????????????c????", "????????????????u??????????????????????s?????z????", "?e???????????????az??o?????????????d?w????????????", "??c???w??b?????????????m??????e??x????????????????", "v????????????e???????????m?n??????w????l???w?????z", "????????????????l?????ln????????????s?????????g???", "??????????????b?m????t??a???????????s?n??s????????", "??????????????n?????????????????z?????????????????", "????????????????????????????????????????????????s?", "e??????j????????w?????????????????q?x?????t??x????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "???o??o??r?????????????v??????????????????????????", "b?????w???u?b????????y?????j?????????????????????v", "??l??????????p????????????i??k????g???????????n???", "??????????k???????????z???????????????b??v?????y??", "?x???????????y?d???tz???g????????p???????h???????s", "?????????z??l?y??????????????????????????????o??k?", "???o??????????????????????????????????????????a???", "??????????????????????????????????h??m???i?????f??", "?????????????????????????????????j?????x?u???????e", "???????b???????????l??????????????????????????????", "?????????????????l??????????p?????????????????????", "?????u????g??????m?????????????????????x?d???????w", "d?y???????????????????????????????o???????????????", "n?????????????????????kt??????????????l???????????", "?yb?????????z???????????????i??v???????????????w??", "??????u??d??h??????????????????????um?????j???????", "?????????ex?????????b?????????????????????????????", "???t?????x???????????????????????????????????a????", "???????????a?????????????????????????md??o??z?????", "????????????t???l??????????????i??????????????????", "??????m??m???????????????a??o???g?????????????????", "??????????????????j????????????q??bi?????????????j", "?????????l??????????q?l???????????????????????????", "???????????f?????u???c????m???x??????om?y???n?????", "???????????????????????????q?????????????s????k???", "????????????????e?????????t?????????????????o?????", "???????????????????????t????????r?????g???v??p????", "????????u?????u????????????????????g??y???????????", "???u??u????????o?????d????t???????????????????????", "??l????????????????????????????????????????????z??", "?j???l?????v???g????????w????w??????????????x?????", "?????????g??????????y?????????????k???????????????", "???????v?????????????????????????e?p???dn?????????", "v??????????????????????m???????n????????????z?j???", "?q?????????????q???e????????????g?????????a??????s", "???????????????????b??j?????????????b???????????k?", "??????????????????s??????d??????v??q??????o???????", "????????q????????o????????m????????????????????p?v"};
				string S2[] = {"??????????????????????????m?g???????????????????y?", "??????????????????????????????????????d????????it?", "???????????????z?q??????????bs????????????????????", "????????????????r?????????????????????????????s???", "?????????????u????????????????????????k???????????", "?b?u????????????????q????????????????????q????????", "?????e????????????????????i???????????l??c????????", "???p????????xn??????????????????????a?????????????", "?????s???qx??????t????????????q???????????????????", "???q??????????????????????????????????????????????", "??????????????????????o??????v????????????????????", "????????????c????????????????????v????????????????", "??????v?????????????d?d??v???u????????????????????", "??r??????????????g????w??????????gw???????rtd?????", "???????????kr?????????v????u???k???????????????cn?", "????????j?????????????????????????????????????????", "???????k????o????????g???????w????????????????????", "???????????????????????????????????y??????????????", "????s??f??????????j?????o?pz??x??????e????????x?t?", "???w??ic????????????a????????z???????l????????????", "???????????h?????????????????m???????????????k????", "t?s??????b?????????bs?????????????????????????????", "?????????c??????????q????????????????p???p????????", "???????????????????????p??????????????????x???????", "h?????i???????????z?????????w?z???????????????wn??", "?????o???????j???????t???????????e?????d???i??????", "??t????????????r??l?????????????????????x?????????", "???????c??????f???p???????????????????????????????", "????t?????g???x??b????????gr???????????????e????h?", "o?????????????x??o????????????????????????????????", "?????????z??b???v???c????????????????ko????????c??", "???????????s??f????????????????????????k??????????", "????e?rf????????m????????h????u???????????????????", "??????????v????????????????????????c?????????????n", "???m????q?????????????????????x???????????????????", "???????a?????o?????????????????????????????d???p??", "???????????????q??????????????????????????????????", "??????????????????????e???x??d??????????????n?????", "s??????????????????????v?????????????????y??b??c??", "????k???????????m???h???????????i???????????????w?", "?????????????e??l?????????????????j???j???????svqm", "?????u????y?????????e??????q??????????????????????", "???????????????u???n?????????x????????????????????", "????f?????????????a??????r??p?????????????????????", "?????????e??????????????h??tt?????????h???????????", "?z???h?u?w???m???????????????h?????????????????i??", "????e?j?????o??????????????????g????????????x??u??", "???????do????d??????b????????i??????s????f??g?????", "?????????f??????????????ng???????u????a????l??????", "??????????????????????t?????????f??r???y????????m?"};
				_expected = 5399.294084018551;
				_received = _obj.expectedPalindromes(vector <string>(S1, S1+sizeof(S1)/sizeof(string)), vector <string>(S2, S2+sizeof(S2)/sizeof(string))); break;
			}
			/*case 7:
			{
				string S1[] = ;
				string S2[] = ;
				_expected = ;
				_received = _obj.expectedPalindromes(vector <string>(S1, S1+sizeof(S1)/sizeof(string)), vector <string>(S2, S2+sizeof(S2)/sizeof(string))); break;
			}*/
			default: return 0;
		}
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(3);
		double _elapsed = (double)(clock()-_start)/(CLOCKS_PER_SEC);
		if (abs(_expected-_received) < 1e-9 || (_received > min(_expected*(1.0-1e-9), _expected*(1.0+1e-9)) && _received < max(_expected*(1.0-1e-9), _expected*(1.0+1e-9))))
			cout << "#" << _tc << ": Passed (" << _elapsed << " secs)" << endl;
		else
		{
			cout << "#" << _tc << ": Failed (" << _elapsed << " secs)" << endl;
			cout.precision(10);
			cout << "           Expected: " << _expected << endl;
			cout << "           Received: " << _received << endl;
		}
	}
}

// END CUT HERE
