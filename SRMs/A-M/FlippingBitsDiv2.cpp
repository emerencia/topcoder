#include <string>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <cmath>
#include <utility>
#include <climits>
#include <cstring>
#include <numeric>
using namespace std;
typedef pair<int,int> PII;
typedef long long LL;
// BEGIN CUT HERE
const int totest = -1;
// END CUT HERE

int dp[2][2];

class FlippingBitsDiv2 {
 public:
  int getmin(vector <string> S, int M) {
    string s = accumulate(S.begin(),S.end(),string(""));
    memset(dp,0,sizeof(dp));
    bool allflipped = true;
    int cur = 0,next = 1;
    for (int i=0;i<s.size();i+=M) {
      int zerocount = 0;
      for (int d=0;d<M;d++)
        zerocount+=(s[i+d] == '0');
      for (int p=0;p<2;p++) {
        int extracost = (p ? M-zerocount : zerocount);
        int temp = extracost;
        if (dp[cur][p] < dp[cur][1-p]+1) {
          temp+=dp[cur][p];
        } else {
          if (p) allflipped = false;
          temp+=dp[cur][1-p]+1;
        }
        dp[next][p] = temp;
      }
      swap(cur,next);
    }
    int r = min(dp[cur][0],dp[cur][1]+allflipped);
    return r;
  }
  
// BEGIN CUT HERE
  // 02:01-02:12
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); if ((Case == -1) || (Case == 5)) test_case_5(); if ((Case == -1) || (Case == 6)) test_case_6(); if ((Case == -1) || (Case == 7)) test_case_7(); if ((Case == -1) || (Case == 8)) test_case_8(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arr0[] = {"00111000"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; int Arg2 = 2; verify_case(0, Arg2, getmin(Arg0, Arg1)); }
	void test_case_1() { string Arr0[] = {"00111000"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 2; int Arg2 = 3; verify_case(1, Arg2, getmin(Arg0, Arg1)); }
	void test_case_2() { string Arr0[] = {"111111"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 3; int Arg2 = 0; verify_case(2, Arg2, getmin(Arg0, Arg1)); }
	void test_case_3() { string Arr0[] = {"00100"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 5; int Arg2 = 2; verify_case(3, Arg2, getmin(Arg0, Arg1)); }
	void test_case_4() { string Arr0[] = {"00010","11010110","1010111","110001010","0110001100"
,"000110110","011010101","00","111","100"}
; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 13; int Arg2 = 31; verify_case(4, Arg2, getmin(Arg0, Arg1)); }
  void test_case_5() { string Arr0[] = {"00100001100011000000000000000100101000100000"}
; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 11; int Arg2 = 10; verify_case(5, Arg2, getmin(Arg0, Arg1)); }
  void test_case_6() { string Arr0[] = {}

; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 2; int Arg2 = 979; verify_case(6, Arg2, getmin(Arg0, Arg1)); }
  void test_case_7() { string Arr0[] = {"00000110110000011001100001110010101000001111000101", "00101100111110001000101111101010101011010011111001", "01011010001000110101000011011101101011010111101100", "00010111011110001101111000001110010100000111000100", "10111001001111101010011111010111110010100001010100", "11110000101100000100000001100100100111101011100100", "10000011111110101111111101001111100000001100101100", "10110011000111100101000000001110101100000010101100", "10101011000101101101101011101101011100110110001111", "10000011101001010110011011010001111000001011001100", "10011000111111010100100011000110000011011001101110", "11111110001011110000010101000111001110100111101110", "01010010100100111100111101100100010011010011101011", "11000111111110011100111110011001001110001010110011", "00100011011011101001101010101010101111010101001010", "00101011111110001010011101111100111010000000010111", "11001110011000000110101010010110011011000100011000", "00110000111100011100011101011001001111111011111011", "00111000010110010001110000110111011000011000110101", "00011101001010100101001110010111001000100011110111", "01011111001001110001011000001111011101111100111101", "00001111000000010110010100000111111010100110111010", "00010101101101101101000010101110001010100110011000", "10000011000110111011001001001010001101000010010001", "01001100111001010110101000111101011001100100101011", "00000100110010111001100100010111111000100110001011", "00100100111110010011000010010010001001101110100101", "00100110110111000110111101000100011000001001110010", "10010100101110101100111110010010011010011010000001", "00110011111001010110000110000010010000001110010111", "10001100111010100001100111110110000010000111010000", "10100000101100111010110100100011110000001110101000", "11011010111001011000101111001001001111001101111100", "11000100111001011100000111101001111101011011000110", "11011111000111110010110110101101000110011000111110", "01101000111110010010111001011010000101100101101001", "01100110011010111010000100100111010000100001000100", "00100110100110000111011000100000000010111100000110", "00100001011011101011011110110101101101101000101111", "11000111000101001110011000100100100011001100010111", "10110001101010111111110000011011101010001000110000", "11111010110000001110101111010011100101111111001011", "10110001010000100001000001100000000101011010111110", "01100000111011111000100011110011000001000111110110", "00011101000000101101101011001001100010001101001000", "01010010101011100100110100111011000110010111000011", "00011001100101101111000111110011001000001111011011", "01111110101110110010000110001100110000101001011110", "01000011100011100111011011010101000001010100000110", "10111100010001111011010101001010011100001011101110"}
; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 25; int Arg2 = 1108; verify_case(7, Arg2, getmin(Arg0, Arg1)); }
  void test_case_8() { string Arr0[] = {"00001100001111000110101011010010101111101010111010", "00100111100100111001000010010110100011110100110100", "11111011011000101100101011010010001101101011000110", "10111011000001001001000111100111001000101110101100", "00001011110100101101111000100111110101110110100111", "01111011010010011110010111010010100101001101000011", "01010101110100000001100111101100110010010100001100", "01101010110110100001011100001100110110001111010010", "10011101011101010110111111000100100001100100001101", "10110011110110010100100100111010001011111111101101", "01001110101000111001001110010100001100100110001000", "11001110100110111101000101000001000001011011110000", "10101110110000100000111001010110011011100011110000", "10100011011010111111011011110011001010100011101110", "11111100011110010100110001101111111001100010010101", "11101001011011111101010101100011110000011010001100", "00001110110101100010000111000110100011100011001001", "11110111111110111010100010110111011010110000101111", "01001101111011011111110100000000110101101001101000", "00000101001100101110011101101110100010111011011101", "01101101110001111001111000100101000100011101001110", "01001000111000100000111101100000011110011011111110", "11011001001011110110011000110011001100011001000010", "10001010001010000010000110110111111000101110110110", "10010001010011001111111011001001111101110000011100", "11001100100011010011100111011000000000001111101001", "01000000001011000011110011110000001011111010101000", "00000010001011100110111111111000000110110010101100", "00000001111110110001101100101000001000100100111111", "01101000110110010111101001101001001100001110101101", "11101011101111010100110101001111011010001001000011", "01000110001011011100000111101100111010011101101011", "11011011011110010101010111010010100000100000101001", "11111101111010011010111011110011111010000000100110", "10111101110111011010010010010010011100000100011101", "00101101111111000100101010100001000001000010010000", "11001001001010011011001111100110101011011010011101", "01000100000001011001111011111010001110111011000011", "11100001001100000111100001011111100011101110101010", "01000100100101001110100101110100011110101000100110", "11001111100111010011110101000111110101110100010001", "01010101011100011000010100011110110011111001110111", "11010100100011000000000111001111101001101000000010", "00011111111001001101000010000011001110010110010110", "00100110101011110000001001010011001010101100010101", "01100001110011011011110111011001010100010010010011", "00101010100101101000001011101010101110101111111011", "01101100000000100000100011111100010111111000010110", "10110001000101001001100111111101101101101101110111", "01000100111010101100101010101001001011111111111101"}
; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1250; int Arg2 = 1223; verify_case(8, Arg2, getmin(Arg0, Arg1)); }
// END CUT HERE

};
// BEGIN CUT HERE
int main() {
  FlippingBitsDiv2 ___test;
  ___test.run_test(totest);
}
// END CUT HERE
