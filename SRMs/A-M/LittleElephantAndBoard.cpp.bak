#include <string>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <cmath>
#include <utility>
#include <climits>
#include <limits>
#include <cstring>
#include <numeric>
using namespace std;
typedef pair<int,int> PII;
typedef long long LL;
// BEGIN CUT HERE
const int toTest = -1;
// 
// END CUT HERE
const int kMod = 1e9+7;

long long dp[2][3];

class LittleElephantAndBoard {
 public:
  long long rec(int i, int j, int k, int prev) {
    if (i == 0 && j == 0 && k == 0) return 1;
    long long r = 0;
    if (i && prev != 0) (r+= rec(i-1,j,k,0))%=kMod;
    if (j && prev != 1) (r+= rec(i,j-1,k,1))%=kMod;
    if (k && prev != 2) (r+= rec(i,j,k-1,2))%=kMod;
    return r;
  }
  long long modPow(long long x, long long y) {
    long long r=1;
    long long a=x;
    while (y > 0) {
        if ( (y&1)==1 ) {
            r = (r * a)%kMod;
        }
        a = (a * a)%kMod;
        y /= 2;
    }
    return r;
  }
  long long modInverse(long long x) {
    return modPow(x, kMod-2);
  }
  long long bico(long long n, long long k) {
    if (k < 0 || n < 0 || k > n) return 0;
    if (k > n-k) k = n-k;
    long long r = 1;
    for (long long i=0;i<k;i++)
      r = ((n-i)%kMod*r%kMod*modInverse(i+1LL))%kMod;
    return r;
  }
  int getNumber(int M, int R, int G, int B) {
    for (int i=0;i<=R;i++) {
      int k = R-i;
      int j = G-k;
      if (j < 0) continue;
      if (B != i+j) continue;
      // if 2 are zero the state is invalid
      if (i == M || j == M || k == M) continue;
      cout << M << " " << i << ", " << j << ", " << k << endl;
      // if 1 is zero then result is 4
      if (i == 0 || j == 0 || k == 0) return 4;
      // else all 3 nonzero
      //return (2LL*rec(i,j,k,-1))%kMod;
      long long cur = 2;
      if (M-i-1 > 0 && i-1 > 0) (cur *= bico(M-i-1,i))%=kMod;
      if (M-k-1 > 0 && k-1 > 0) (cur *= bico(M-k-1,k))%=kMod;
      if (M-k-1 > 0 && j-1 > 0) (cur *= bico(M-j-1,j))%=kMod;
      return cur;
    }
    return 0;
  }
  
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { int Arg0 = 2; int Arg1 = 2; int Arg2 = 1; int Arg3 = 1; int Arg4 = 4; verify_case(0, Arg4, getNumber(Arg0, Arg1, Arg2, Arg3)); }
	void test_case_1() { int Arg0 = 2; int Arg1 = 2; int Arg2 = 2; int Arg3 = 0; int Arg4 = 0; verify_case(1, Arg4, getNumber(Arg0, Arg1, Arg2, Arg3)); }
	void test_case_2() { int Arg0 = 10; int Arg1 = 7; int Arg2 = 7; int Arg3 = 6; int Arg4 = 496; verify_case(2, Arg4, getNumber(Arg0, Arg1, Arg2, Arg3)); }
	void test_case_3() { int Arg0 = 474; int Arg1 = 250; int Arg2 = 300; int Arg3 = 398; int Arg4 = 969878317; verify_case(3, Arg4, getNumber(Arg0, Arg1, Arg2, Arg3)); }

// END CUT HERE

};
// BEGIN CUT HERE
int main() {
  LittleElephantAndBoard ___test;
  ___test.run_test(toTest);
}
// END CUT HERE
